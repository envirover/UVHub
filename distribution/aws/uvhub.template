{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation template for UV Hub and UV Tracks servers of SPL Global Telemetry System. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "AllowedPattern" : ".+",
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
    },
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "t3.micro", "t3.small", "t3.medium"  ]
    },
    "ClientCIDR" : {
      "Description" : "CIDR IP address range of GCS clients and SSH",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "RockBlockIMEI" : {
      "Description" : "Unique IMEI of your RockBLOCK",
      "Type" : "String",
      "AllowedPattern" : "($^)|(\\d{15})",
      "ConstraintDescription" : "RockBLOCK IMEI must be a 15 digit number or blank bield if RockBLOCK is not used."
    },
    "RockBlockUsername" : {
      "Description" : "Your Rock 7 Core username",
      "Type" : "String"
    },
    "RockBlockPassword" : {
      "Description" : "Your Rock 7 Core password",
      "Type" : "String",
      "NoEcho" : true
    },
    "MAVAutopilot" : {
      "Description" : "Autopilot class",
      "Type" : "String",
      "AllowedValues" : ["ArduPilot", "PX4"],
      "Default" : "ArduPilot"
    },
    "MAVType" : {
      "Description" : "Vehicle type",
      "Type" : "String",
      "AllowedValues" : ["PLANE", "COAXIAL", "HELICOPTER", "QUADROTOR", "HEXAROTOR", "OCTAROTOR", "ROVER", "BOAT", "SUBMARINE"],
      "Default" : "QUADROTOR"
    },
    "UVHubArchiveURL" : {
      "Description" : "URL of UV Hub distribution archive",
      "Type" : "String",
      "Default" : "https://s3-us-west-2.amazonaws.com/envirover/UVHub/uvhub-2.1-bin.tar.gz"
    },
    "UVTracksArchiveURL" : {
      "Description" : "URL of UV Tracks distribution archive",
      "Type" : "String",
      "Default" : "https://s3-us-west-2.amazonaws.com/envirover/UVHub/uvtracks-2.1-bin.tar.gz"
    }    
  },
  "Mappings" : {
    "MAVAutopilotMap" : {
      "ArduPilot" : {
        "code" : "3"
      },
      "PX4" : {
        "code" : "12"
      }
    },
    "MAVTypeMap" : {
      "PLANE" : {
        "code" : "1"
      },
      "QUADROTOR" : {
        "code" : "2"
      },
      "HELICOPTER" : {
        "code" : "4"
      },
      "ROVER" : {
        "code" : "10"
      },  
      "BOAT" : {
        "code" : "11"
      }, 
      "SUBMARINE" : {
        "code" : "12"
      }
    },
    "RegionMap" : {
      "ap-northeast-1" : {
        "AMI" : "ami-08847abae18baa040"
      },
      "ap-northeast-2" : {
        "AMI" : "ami-012566705322e9a8e"
      },
      "ap-northeast-3" : {
        "AMI" : "ami-00f7ef6bf92e8f916"
      },
      "ap-south-1" : {
        "AMI" : "ami-00b6a8a2bd28daf19"
      },
      "ap-southeast-1" : {
        "AMI" : "ami-01da99628f381e50a"
      },
      "ap-southeast-2" : {
        "AMI" : "ami-00e17d1165b9dd3ec"
      },
      "ca-central-1" : {
        "AMI" : "ami-ce1b96aa"
      },
      "cn-north-1" : {
        "AMI" : "ami-9a06def7"
      },
      "cn-northwest-1" : {
        "AMI" : "ami-116a7d73"
      },
      "eu-central-1" : {
        "AMI" : "ami-0f5dbc86dd9cbf7a8"
      },
      "eu-west-1" : {
        "AMI" : "ami-0bdb1d6c15a40392c"
      },
      "eu-west-2" : {
        "AMI" : "ami-e1768386"
      },
      "eu-west-3" : {
        "AMI" : "ami-06340c8c12baa6a09"
      },
      "sa-east-1" : {
        "AMI" : "ami-0ad7b0031d41ed4b9"
      },
      "us-east-1" : {
        "AMI" : "ami-04681a1dbd79675a5"
      },
      "us-east-2" : {
        "AMI" : "ami-0cf31d971a3ca20d6"
      },
      "us-west-1" : {
        "AMI" : "ami-0782017a917e973e7"
      },
      "us-west-2" : {
        "AMI" : "ami-6cd6f714"
      }
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
         "Label" : { "default" : "Autopilot and Vehicle" },
          "Parameters" : [ "MAVAutopilot", "MAVType" ]
        },
        {
          "Label" : { "default" : "Amazon EC2 Configuration" },
          "Parameters" : [ "KeyName", "InstanceType" ]
        },
        {
          "Label" : { "default" : "RockBLOCK info" },
          "Parameters" : [ "RockBlockIMEI", "RockBlockUsername", "RockBlockPassword" ]
        },
         {
          "Label" : { "default" : "SPL Software Download URLs" },
          "Parameters" : [ "UVHubArchiveURL", "UVTracksArchiveURL" ]
        },
         {
          "Label" : { "default" : "Access Control" },
          "Parameters" : [ "ClientCIDR" ]
        }
      ],
      "ParameterLabels" : {
        "MAVAutopilot" : { "default" : "MAV Autopilot" },
        "MAVType" : { "default" : "MAV Type" },
        "KeyName" : { "default" : "Key Name" },
        "InstanceType" : { "default" : "Instance Type" },
        "RockBlockIMEI" : { "default" : "RockBLOCK IMEI" },
        "RockBlockUsername" : { "default" : "RockBLOCK Username" },
        "RockBlockPassword" : { "default" : "RockBLOCK Password" },
        "UVHubArchiveURL" : { "default" : "UVHub Archive URL" },
        "ClientCIDR" : { "default" : "Client CIDR" }
      }
    }
  },
  "Resources" : {
    "UVHubSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable Rock7Mobile access on port 8080, RadioRoom on port 5060, MAVLink GCS access on ports 5757/5760, and SSH access on port 22",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "8080",
          "ToPort" : "8080",
          "CidrIp" : "109.74.196.135/32"
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "8080",
          "ToPort" : "8080",
          "CidrIp" : "212.71.235.32/32"
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "5060",
          "ToPort" : "5060",
          "CidrIp" : {
            "Ref" : "ClientCIDR"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "5760",
          "ToPort" : "5760",
          "CidrIp" : {
            "Ref" : "ClientCIDR"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "5757",
          "ToPort" : "5757",
          "CidrIp" : {
            "Ref" : "ClientCIDR"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : {
            "Ref" : "ClientCIDR"
          }
        } ]
      }
    },
    "UVTracksSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access on port 80 and SSH access on port 22",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : {
            "Ref" : "ClientCIDR"
          }
        } ]
      }
    },    
    "IAMRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : "LogRolePolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [ {
               "Effect" : "Allow",
               "Action" : [ "cloudformation:*" ],
               "Resource" : [ "arn:aws:cloudformation:*:*:*" ]
              },
              {
                "Effect": "Allow",
                "Action": [
                    "ssm:DescribeAssociation",
                    "ssm:GetDeployablePatchSnapshotForInstance",
                    "ssm:GetDocument",
                    "ssm:GetManifest",
                    "ssm:GetParameters",
                    "ssm:ListAssociations",
                    "ssm:ListInstanceAssociations",
                    "ssm:PutInventory",
                    "ssm:PutComplianceItems",
                    "ssm:PutConfigurePackageResult",
                    "ssm:UpdateAssociationStatus",
                    "ssm:UpdateInstanceAssociationStatus",
                    "ssm:UpdateInstanceInformation"
                ],
                "Resource": "*"
            },
            {
                "Effect": "Allow",
                "Action": [
                    "ssmmessages:CreateControlChannel",
                    "ssmmessages:CreateDataChannel",
                    "ssmmessages:OpenControlChannel",
                    "ssmmessages:OpenDataChannel"
                ],
                "Resource": "*"
            },
            {
                "Effect": "Allow",
                "Action": [
                    "ec2messages:AcknowledgeMessage",
                    "ec2messages:DeleteMessage",
                    "ec2messages:FailMessage",
                    "ec2messages:GetEndpoint",
                    "ec2messages:GetMessages",
                    "ec2messages:SendReply"
                ],
                "Resource": "*"
            },
            {
                "Effect": "Allow",
                "Action": [
                    "cloudwatch:PutMetricData"
                ],
                "Resource": "*"
            },
            {
                "Effect": "Allow",
                "Action": [
                    "ec2:DescribeInstanceStatus"
                ],
                "Resource": "*"
            },
            {
                "Effect": "Allow",
                "Action": [
                    "ds:CreateComputer",
                    "ds:DescribeDirectories"
                ],
                "Resource": "*"
            },
            {
                "Effect": "Allow",
                "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                ],
                "Resource": "*"
            },
            {
                "Effect": "Allow",
                "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:GetEncryptionConfiguration",
                    "s3:AbortMultipartUpload",
                    "s3:ListMultipartUploadParts",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads"
                ],
                "Resource": "*"
            } ]
          }
        } ]
      }
    },
    "IAMInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "IAMRole" } ]
      }
    },
    "ElasticsearchDomain": {
      "Type": "AWS::Elasticsearch::Domain",
      "Properties": {
        "DomainName": {"Ref" : "AWS::StackName"},
        "ElasticsearchVersion" : "6.2",
        "ElasticsearchClusterConfig": {
          "InstanceCount": "1",
          "InstanceType": "t2.small.elasticsearch"
        },
        "EBSOptions": {
          "EBSEnabled": true,
          "Iops": 0,
          "VolumeSize": 10,
          "VolumeType": "gp2"
        },
        "AccessPolicies": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "AWS": "*"
            },
            "Action": "es:*",
            "Resource": { "Fn::Join" : [ "", ["arn:aws:es:", { "Ref" : "AWS::Region" }, ":", {"Ref" : "AWS::AccountId"}, ":domain/", {"Ref" : "AWS::StackName"}, "/*"] ] },
            "Condition": {
              "IpAddress": {
                "aws:SourceIp": [ { "Fn::GetAtt" : [ "UVHubInstance", "PublicIp" ] }, 
                                  { "Fn::GetAtt" : [ "UVTracksInstance", "PublicIp" ] } ]
              }
            }
          }]
        }
      }
    },
    "UVHubInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref" : "UVHubSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [{ "Ref" : "AWS::StackName" }, "-uvhub"]] } } ]
      }
    },
    "UVHubInstanceRecoveryAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Trigger a recovery when instance status check fails for 5 consecutive minutes.",
        "MetricName" : "StatusCheckFailed_System",
        "Namespace" : "AWS/EC2",
        "Statistic" : "Minimum",
        "Period" : "60",
        "EvaluationPeriods" : "5",
        "Threshold" : "0",
        "ComparisonOperator" : "GreaterThanThreshold",
        "AlarmActions" : [ {"Fn::Join" : ["", ["arn:", {"Ref" : "AWS::Partition"}, ":automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions" : [ {
            "Name" : "InstanceId",
            "Value" : {"Ref" : "UVHubInstance"}
        } ]
      }
    },
    "UVHubInit" : {
      "Type" : "AWS::SSM::Document",
      "Properties" : {
        "DocumentType" : "Command",
         "Content" : {
           "schemaVersion":"2.2",
           "description":"UVHub EC2 instance init",
           "parameters":{
             "UVHubArchiveURL" : {
               "type":"String",
               "default": { "Ref" : "UVHubArchiveURL" }
             },
             "StackId" : {
               "type":"String",
               "default": { "Ref" : "AWS::StackId" }
             },
             "Region" : {
               "type":"String",
               "default": { "Ref" : "AWS::Region" }
             },
             "StackName" : {
               "type":"String",
               "default": { "Ref" : "AWS::StackName" }
             },
             "WaitHandle" : {
               "type":"String",
               "default": { "Ref" : "UVHubWaitHandle" }
             }
           },
           "mainSteps":[ {
                 "action":"aws:runShellScript",
                 "name":"UVHubInit",
                 "inputs":{
                    "runCommand":[
                        "#!/bin/bash", 
                        "yum install -y java-1.8.0",
                        "yum update -y", 
                        "yum install -y awslogs",
                        "mkdir /opt/spl", 
                        "cd /opt/spl",
                        "wget {{UVHubArchiveURL}} -O uvhub-bin.tar.gz",
                        "tar -xvzf uvhub-bin.tar.gz", 
                        "cp /opt/spl/conf/uvhub.service /etc/systemd/system/",
                        "chmod 755 /etc/systemd/system/uvhub.service",
                        "/opt/aws/bin/cfn-init -s {{StackId}} -r UVHubInit --region {{Region}} || error_exit 'Failed to run cfn-init'",
                        "systemctl start awslogsd.service",
                        "systemctl daemon-reload",
                        "systemctl enable uvhub.service",
                        "systemctl start uvhub.service",
                        "/opt/aws/bin/cfn-signal -e $? --stack '{{StackName}}' --region {{Region}} '{{WaitHandle}}'" 
                       ]
                 }
             } ]
          }
       },
       "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/opt/spl/conf/app.properties" : {
                "content" : {
                  "Fn::Join" : [ "", [
                    "rockblock.port=8080\n", 
                    "radioroom.port=5060\n", 
                    "mavlink.port=5760\n", 
                    "shadow.port=5757\n", 
                    "ws.port=8000\n", 
                    "heartbeat.interval=1000\n", 
                    "rockblock.imei=", { "Ref" : "RockBlockIMEI" }, "\n", 
                    "rockblock.username=", { "Ref" : "RockBlockUsername" }, "\n", 
                    "rockblock.password=", { "Ref" : "RockBlockPassword" }, "\n", 
                    "mav.autopilot=", { "Fn::FindInMap" : [ "MAVAutopilotMap", { "Ref" : "MAVAutopilot" }, "code" ] }, "\n", 
                    "mav.type=", { "Fn::FindInMap" : [ "MAVTypeMap", { "Ref" : "MAVType" }, "code" ] }, "\n",
                    "elasticsearch.endpoint=", { "Fn::GetAtt" : [ "ElasticsearchDomain", "DomainEndpoint" ] }, "\n",
                    "elasticsearch.port=443\n",
                    "elasticsearch.protocol=https\n"
                  ] ]
                },
                "mode" : "000444"
              },
              "/etc/awslogs/awscli.conf" : {
                "content" : {
                  "Fn::Join" : [ "", [ 
                    "[plugins]\n", 
                    "cwlogs = cwlogs\n", 
                    "[default]\n", 
                    "region = ", { "Ref" : "AWS::Region" }, "\n"
                  ] ]
                },
                "mode" : "000444"
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : {
                  "Fn::Join" : [ "", [ 
                    "[general]\n", 
                    "state_file= /var/lib/awslogs/agent-state\n", 
                    "[/var/log/uvhub.log]\n", 
                    "file = /var/log/uvhub.log\n", 
                    "log_group_name = ", { "Ref" : "LogGroup" }, "\n",
                    "log_stream_name = {instance_id}/uvhub.log\n",
                    "datetime_format = %Y-%m-%d %H:%M:%S\n" ] ]
                },
                "mode" : "000444"
              }, 
              "/opt/spl/conf/log4j2.properties" : {
                "content" : {
                  "Fn::Join" : [ "", [ 
                    "filter.threshold.type=ThresholdFilter\n",
                    "filter.threshold.level=debug\n",
                    "appender.console.type=Console\n",
                    "appender.console.name=STDOUT\n",
                    "appender.console.layout.type=PatternLayout\n",
                    "appender.console.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\n",
                    "appender.console.filter.threshold.type=ThresholdFilter\n",
                    "appender.console.filter.threshold.level=info\n",
                     "appender.rolling.type=RollingFile\n",
                    "appender.rolling.name=RollingFile\n",
                    "appender.rolling.fileName=/var/log/uvhub.log\n",
                    "appender.rolling.filePattern=/var/log/uvhub-%d{MM-dd-yy-HH-mm-ss}-%i.log.gz\n",
                    "appender.rolling.layout.type=PatternLayout\n",
                    "appender.rolling.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\n",
                    "appender.rolling.policies.type=Policies\n",
                    "appender.rolling.policies.size.type=SizeBasedTriggeringPolicy\n",
                    "appender.rolling.policies.size.size=100MB\n",
                    "appender.rolling.strategy.type=DefaultRolloverStrategy\n",
                    "appender.rolling.strategy.max=5\n",
                       "rootLogger.level=info\n",
                    "rootLogger.appenderRef.stdout.ref=STDOUT\n",
                    "rootLogger.appenderRef.rolling.ref=RollingFile\n" ] ]
                },
                "mode" : "000444"
              }
            }
          }
        }
      }
    },
    "UVHubWaitHandle" : {
       "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "UVHubWaitCondition" : {
       "Type" : "AWS::CloudFormation::WaitCondition",
       "Properties" : {
          "Handle"  : { "Ref" : "UVHubWaitHandle" },
          "Timeout" : "1800",
          "Count"   : 1
       }
    },  
    "UVHubInitAssociation": {
      "Type": "AWS::SSM::Association",
      "DependsOn" : "ElasticsearchDomain",
      "Properties": {
        "Name": {
          "Ref": "UVHubInit"
        },
        "Targets": [{
          "Key": "InstanceIds",
          "Values": [{
            "Ref": "UVHubInstance"
          }]
        }]
      }
    },
    "UVTracksInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref" : "UVTracksSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ "", [{ "Ref" : "AWS::StackName" }, "-uvtracks"]] } } ]
       }
    },
    "UVTracksInstanceRecoveryAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Trigger a recovery when instance status check fails for 5 consecutive minutes.",
        "MetricName" : "StatusCheckFailed_System",
        "Namespace" : "AWS/EC2",
        "Statistic" : "Minimum",
        "Period" : "60",
        "EvaluationPeriods" : "5",
        "Threshold" : "0",
        "ComparisonOperator" : "GreaterThanThreshold",
        "AlarmActions" : [ {"Fn::Join" : ["", ["arn:", {"Ref" : "AWS::Partition"}, ":automate:", { "Ref" : "AWS::Region" }, ":ec2:recover" ]]} ],
        "Dimensions" : [ {
            "Name" : "InstanceId",
            "Value" : {"Ref" : "UVTracksInstance"}
        } ]
      }
    },
    "UVTracksInit" : {
      "Type" : "AWS::SSM::Document",
      "Properties" : {
        "DocumentType" : "Command",
         "Content" : {
           "schemaVersion":"2.2",
           "description":"UVTracks EC2 instance init",
           "parameters":{
             "UVTracksArchiveURL" : {
               "type":"String",
               "default": { "Ref" : "UVTracksArchiveURL" }
             },
             "StackId" : {
               "type":"String",
               "default": { "Ref" : "AWS::StackId" }
             },
             "Region" : {
               "type":"String",
               "default": { "Ref" : "AWS::Region" }
             },
             "StackName" : {
               "type":"String",
               "default": { "Ref" : "AWS::StackName" }
             },
             "WaitHandle" : {
               "type":"String",
               "default": { "Ref" : "UVTracksWaitHandle" }
             }
           },
           "mainSteps":[ {
                 "action":"aws:runShellScript",
                 "name":"UVTracksInit",
                 "inputs":{
                    "runCommand":[
                        "#!/bin/bash", 
                        "mkdir /opt/spl",
                        "yum install -y java-1.8.0",
                        "yum update -y", 
                        "yum install -y awslogs",            
                        "cd /opt/spl",
                        "wget {{UVTracksArchiveURL}} -O uvtracks-bin.tar.gz",
                        "tar -xvzf uvtracks-bin.tar.gz",
                        "cp /opt/spl/jetty/uvtracks-base/etc/uvtracks.service /etc/systemd/system/",
                        "chmod 755 /etc/systemd/system/uvtracks.service",
                        "/opt/aws/bin/cfn-init -s {{StackId}} -r UVTracksInit --region {{Region}} || error_exit 'Failed to run cfn-init'",
                        "systemctl start awslogsd.service",
                        "systemctl daemon-reload",
                        "systemctl enable uvtracks.service",
                        "systemctl start uvtracks.service",
                        "/opt/aws/bin/cfn-signal -e $? --stack '{{StackName}}' --region {{Region}} '{{WaitHandle}}'" 
                       ]
                 }
             } ]
          }
       },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/opt/spl/jetty/uvtracks-base/resources/app.properties" : {
                "content" : {
                  "Fn::Join" : [ "", [
                    "mav.autopilot=", { "Fn::FindInMap" : [ "MAVAutopilotMap", { "Ref" : "MAVAutopilot" }, "code" ] }, "\n", 
                    "mav.type=", { "Fn::FindInMap" : [ "MAVTypeMap", { "Ref" : "MAVType" }, "code" ] }, "\n",
                    "elasticsearch.endpoint=", { "Fn::GetAtt" : [ "ElasticsearchDomain", "DomainEndpoint" ] }, "\n",
                    "elasticsearch.port=443\n",
                    "elasticsearch.protocol=https\n"
                  ] ]
                },
                "mode" : "000444"
              },
              "/etc/awslogs/awscli.conf" : {
                "content" : {
                  "Fn::Join" : [ "", [ 
                    "[plugins]\n", 
                    "cwlogs = cwlogs\n", 
                    "[default]\n", 
                    "region = ", { "Ref" : "AWS::Region" }, "\n"
                  ] ]
                },
                "mode" : "000444"
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : {
                  "Fn::Join" : [ "", [ 
                    "[general]\n", 
                    "state_file= /var/lib/awslogs/agent-state\n", 
                    "[/var/log/uvtracks.log]\n", 
                    "file = /var/log/uvtracks.log\n", 
                    "log_group_name = ", { "Ref" : "LogGroup" }, "\n",
                    "log_stream_name = {instance_id}/uvtracks.log\n",
                    "datetime_format = %Y-%m-%d %H:%M:%S\n" ] ]
                },
                "mode" : "000444"
              }, 
              "/opt/spl/jetty/uvtracks-base/resources/log4j2.properties" : {
                "content" : {
                  "Fn::Join" : [ "", [ 
                    "filter.threshold.type=ThresholdFilter\n",
                    "filter.threshold.level=debug\n",
                    "appender.console.type=Console\n",
                    "appender.console.name=STDOUT\n",
                    "appender.console.layout.type=PatternLayout\n",
                    "appender.console.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\n",
                    "appender.console.filter.threshold.type=ThresholdFilter\n",
                    "appender.console.filter.threshold.level=info\n",
                     "appender.rolling.type=RollingFile\n",
                    "appender.rolling.name=RollingFile\n",
                    "appender.rolling.fileName=/var/log/uvtracks.log\n",
                    "appender.rolling.filePattern=/var/log/uvtracks-%d{MM-dd-yy-HH-mm-ss}-%i.log.gz\n",
                    "appender.rolling.layout.type=PatternLayout\n",
                    "appender.rolling.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %m%n\n",
                    "appender.rolling.policies.type=Policies\n",
                    "appender.rolling.policies.size.type=SizeBasedTriggeringPolicy\n",
                    "appender.rolling.policies.size.size=100MB\n",
                    "appender.rolling.strategy.type=DefaultRolloverStrategy\n",
                    "appender.rolling.strategy.max=5\n",
                       "rootLogger.level=info\n",
                    "rootLogger.appenderRef.stdout.ref=STDOUT\n",
                    "rootLogger.appenderRef.rolling.ref=RollingFile\n" ] ]
                },
                "mode" : "000444"
              }
            }
          }
        }
      }
    },
    "UVTracksWaitHandle" : {
       "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "UVTracksWaitCondition" : {
       "Type" : "AWS::CloudFormation::WaitCondition",
       "Properties" : {
          "Handle"  : { "Ref" : "UVTracksWaitHandle" },
          "Timeout" : "1800",
          "Count"   : 1
       }
    },  
    "UVTracksInitAssociation": {
      "Type": "AWS::SSM::Association",
      "DependsOn" : "ElasticsearchDomain",
      "Properties": {
        "Name": { "Ref": "UVTracksInit" },
        "Targets": [ {
          "Key": "InstanceIds",
          "Values": [ { "Ref": "UVTracksInstance" } ]
        } ]
      }
    },
    "LogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "RetentionInDays" : 7
      }
    }
  },
  "Outputs" : {
    "UVTracksURL" : {
      "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "UVTracksInstance", "PublicIp" ] }, "/uvtracks" ] ] },
      "Description" : "UV Tracks service URL"
    },
    "RockBLOCKHandlerURL" : {
      "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "UVHubInstance", "PublicIp" ] }, ":8080/mo" ] ] },
      "Description" : "HTTP handler URL for mobile-originated RockBLOCK messages"
    },
    "MAVLinkClientURL" : {
      "Value" : { "Fn::Join" : [ "", [ "tcp://", { "Fn::GetAtt" : [ "UVHubInstance", "PublicIp" ] }, ":5760" ] ] },
      "Description" : "GCS client TCP/IP connection URL"
    },
    "ShadowClientURL" : {
      "Value" : { "Fn::Join" : [ "", [ "tcp://", { "Fn::GetAtt" : [ "UVHubInstance", "PublicIp" ] }, ":5757" ] ] },
      "Description" : "GCS client TCP/IP connection URL used to update parameters and missions in the reported state of the vehicle's shadow"
    },
    "RadioRoomClientURL" : {
      "Value" : { "Fn::Join" : [ "", [ "tcp://", { "Fn::GetAtt" : [ "UVHubInstance", "PublicIp" ] }, ":5060" ] ] },
      "Description" : "Host and port that must be specified in radioroom.conf file in RadioRoom, if TCP comm link is enabled"
    },
    "CloudWatchLogs" : {
      "Value" : { "Fn::Join" : [ "", [ "https://console.aws.amazon.com/cloudwatch/home?region=", { "Ref" : "AWS::Region" }, "#logStream:group=", { "Ref" : "LogGroup" } ] ] },
      "Description" : "CloudWatch logs of UV Hub and UV Tracks servers"
    }
  }
}